// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: proto/loadtester.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerServiceClient is the client API for WorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerServiceClient interface {
	RegisterWorker(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Changed to a bidirectional streaming RPC for continuous worker status updates.
	// Worker sends WorkerStatus, Master can respond with WorkerStatusAck.
	StreamWorkerStatus(ctx context.Context, opts ...grpc.CallOption) (WorkerService_StreamWorkerStatusClient, error)
	AssignTest(ctx context.Context, in *TestAssignment, opts ...grpc.CallOption) (*AssignmentResponse, error)
	// New RPC for workers to submit test results to master
	SubmitTestResult(ctx context.Context, in *TestResultSubmission, opts ...grpc.CallOption) (*TestResultResponse, error)
}

type workerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerServiceClient(cc grpc.ClientConnInterface) WorkerServiceClient {
	return &workerServiceClient{cc}
}

func (c *workerServiceClient) RegisterWorker(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/loadtester.WorkerService/RegisterWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) StreamWorkerStatus(ctx context.Context, opts ...grpc.CallOption) (WorkerService_StreamWorkerStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkerService_ServiceDesc.Streams[0], "/loadtester.WorkerService/StreamWorkerStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerServiceStreamWorkerStatusClient{stream}
	return x, nil
}

type WorkerService_StreamWorkerStatusClient interface {
	Send(*WorkerStatus) error
	Recv() (*WorkerStatusAck, error)
	grpc.ClientStream
}

type workerServiceStreamWorkerStatusClient struct {
	grpc.ClientStream
}

func (x *workerServiceStreamWorkerStatusClient) Send(m *WorkerStatus) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workerServiceStreamWorkerStatusClient) Recv() (*WorkerStatusAck, error) {
	m := new(WorkerStatusAck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerServiceClient) AssignTest(ctx context.Context, in *TestAssignment, opts ...grpc.CallOption) (*AssignmentResponse, error) {
	out := new(AssignmentResponse)
	err := c.cc.Invoke(ctx, "/loadtester.WorkerService/AssignTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) SubmitTestResult(ctx context.Context, in *TestResultSubmission, opts ...grpc.CallOption) (*TestResultResponse, error) {
	out := new(TestResultResponse)
	err := c.cc.Invoke(ctx, "/loadtester.WorkerService/SubmitTestResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServiceServer is the server API for WorkerService service.
// All implementations must embed UnimplementedWorkerServiceServer
// for forward compatibility
type WorkerServiceServer interface {
	RegisterWorker(context.Context, *WorkerInfo) (*RegisterResponse, error)
	// Changed to a bidirectional streaming RPC for continuous worker status updates.
	// Worker sends WorkerStatus, Master can respond with WorkerStatusAck.
	StreamWorkerStatus(WorkerService_StreamWorkerStatusServer) error
	AssignTest(context.Context, *TestAssignment) (*AssignmentResponse, error)
	// New RPC for workers to submit test results to master
	SubmitTestResult(context.Context, *TestResultSubmission) (*TestResultResponse, error)
	mustEmbedUnimplementedWorkerServiceServer()
}

// UnimplementedWorkerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServiceServer struct {
}

func (UnimplementedWorkerServiceServer) RegisterWorker(context.Context, *WorkerInfo) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (UnimplementedWorkerServiceServer) StreamWorkerStatus(WorkerService_StreamWorkerStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamWorkerStatus not implemented")
}
func (UnimplementedWorkerServiceServer) AssignTest(context.Context, *TestAssignment) (*AssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTest not implemented")
}
func (UnimplementedWorkerServiceServer) SubmitTestResult(context.Context, *TestResultSubmission) (*TestResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTestResult not implemented")
}
func (UnimplementedWorkerServiceServer) mustEmbedUnimplementedWorkerServiceServer() {}

// UnsafeWorkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServiceServer will
// result in compilation errors.
type UnsafeWorkerServiceServer interface {
	mustEmbedUnimplementedWorkerServiceServer()
}

func RegisterWorkerServiceServer(s grpc.ServiceRegistrar, srv WorkerServiceServer) {
	s.RegisterService(&WorkerService_ServiceDesc, srv)
}

func _WorkerService_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loadtester.WorkerService/RegisterWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).RegisterWorker(ctx, req.(*WorkerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_StreamWorkerStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkerServiceServer).StreamWorkerStatus(&workerServiceStreamWorkerStatusServer{stream})
}

type WorkerService_StreamWorkerStatusServer interface {
	Send(*WorkerStatusAck) error
	Recv() (*WorkerStatus, error)
	grpc.ServerStream
}

type workerServiceStreamWorkerStatusServer struct {
	grpc.ServerStream
}

func (x *workerServiceStreamWorkerStatusServer) Send(m *WorkerStatusAck) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workerServiceStreamWorkerStatusServer) Recv() (*WorkerStatus, error) {
	m := new(WorkerStatus)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _WorkerService_AssignTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestAssignment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).AssignTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loadtester.WorkerService/AssignTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).AssignTest(ctx, req.(*TestAssignment))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_SubmitTestResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestResultSubmission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).SubmitTestResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loadtester.WorkerService/SubmitTestResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).SubmitTestResult(ctx, req.(*TestResultSubmission))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkerService_ServiceDesc is the grpc.ServiceDesc for WorkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loadtester.WorkerService",
	HandlerType: (*WorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterWorker",
			Handler:    _WorkerService_RegisterWorker_Handler,
		},
		{
			MethodName: "AssignTest",
			Handler:    _WorkerService_AssignTest_Handler,
		},
		{
			MethodName: "SubmitTestResult",
			Handler:    _WorkerService_SubmitTestResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamWorkerStatus",
			Handler:       _WorkerService_StreamWorkerStatus_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/loadtester.proto",
}

// MasterServiceClient is the client API for MasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterServiceClient interface {
	SubmitTest(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestSubmissionResponse, error)
	GetDashboardStatus(ctx context.Context, in *DashboardRequest, opts ...grpc.CallOption) (*DashboardStatus, error)
}

type masterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterServiceClient(cc grpc.ClientConnInterface) MasterServiceClient {
	return &masterServiceClient{cc}
}

func (c *masterServiceClient) SubmitTest(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestSubmissionResponse, error) {
	out := new(TestSubmissionResponse)
	err := c.cc.Invoke(ctx, "/loadtester.MasterService/SubmitTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetDashboardStatus(ctx context.Context, in *DashboardRequest, opts ...grpc.CallOption) (*DashboardStatus, error) {
	out := new(DashboardStatus)
	err := c.cc.Invoke(ctx, "/loadtester.MasterService/GetDashboardStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServiceServer is the server API for MasterService service.
// All implementations must embed UnimplementedMasterServiceServer
// for forward compatibility
type MasterServiceServer interface {
	SubmitTest(context.Context, *TestRequest) (*TestSubmissionResponse, error)
	GetDashboardStatus(context.Context, *DashboardRequest) (*DashboardStatus, error)
	mustEmbedUnimplementedMasterServiceServer()
}

// UnimplementedMasterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMasterServiceServer struct {
}

func (UnimplementedMasterServiceServer) SubmitTest(context.Context, *TestRequest) (*TestSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTest not implemented")
}
func (UnimplementedMasterServiceServer) GetDashboardStatus(context.Context, *DashboardRequest) (*DashboardStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardStatus not implemented")
}
func (UnimplementedMasterServiceServer) mustEmbedUnimplementedMasterServiceServer() {}

// UnsafeMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServiceServer will
// result in compilation errors.
type UnsafeMasterServiceServer interface {
	mustEmbedUnimplementedMasterServiceServer()
}

func RegisterMasterServiceServer(s grpc.ServiceRegistrar, srv MasterServiceServer) {
	s.RegisterService(&MasterService_ServiceDesc, srv)
}

func _MasterService_SubmitTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).SubmitTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loadtester.MasterService/SubmitTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).SubmitTest(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetDashboardStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetDashboardStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loadtester.MasterService/GetDashboardStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetDashboardStatus(ctx, req.(*DashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterService_ServiceDesc is the grpc.ServiceDesc for MasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loadtester.MasterService",
	HandlerType: (*MasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTest",
			Handler:    _MasterService_SubmitTest_Handler,
		},
		{
			MethodName: "GetDashboardStatus",
			Handler:    _MasterService_GetDashboardStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/loadtester.proto",
}
