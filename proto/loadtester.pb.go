// proto/loadtester.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: loadtester.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatusType int32

const (
	StatusType_READY     StatusType = 0
	StatusType_BUSY      StatusType = 1
	StatusType_FINISHING StatusType = 2
	StatusType_ERROR     StatusType = 3
)

// Enum value maps for StatusType.
var (
	StatusType_name = map[int32]string{
		0: "READY",
		1: "BUSY",
		2: "FINISHING",
		3: "ERROR",
	}
	StatusType_value = map[string]int32{
		"READY":     0,
		"BUSY":      1,
		"FINISHING": 2,
		"ERROR":     3,
	}
)

func (x StatusType) Enum() *StatusType {
	p := new(StatusType)
	*p = x
	return p
}

func (x StatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_loadtester_proto_enumTypes[0].Descriptor()
}

func (StatusType) Type() protoreflect.EnumType {
	return &file_loadtester_proto_enumTypes[0]
}

func (x StatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusType.Descriptor instead.
func (StatusType) EnumDescriptor() ([]byte, []int) {
	return file_loadtester_proto_rawDescGZIP(), []int{0}
}

// Worker Information
type WorkerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"` // gRPC address of the worker
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerInfo) Reset() {
	*x = WorkerInfo{}
	mi := &file_loadtester_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerInfo) ProtoMessage() {}

func (x *WorkerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_loadtester_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerInfo.ProtoReflect.Descriptor instead.
func (*WorkerInfo) Descriptor() ([]byte, []int) {
	return file_loadtester_proto_rawDescGZIP(), []int{0}
}

func (x *WorkerInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkerInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Worker Registration Response
type RegisterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	mi := &file_loadtester_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_loadtester_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_loadtester_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Worker Status Update (sent from Worker to Master)
type WorkerStatus struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	WorkerId string                 `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Status   StatusType             `protobuf:"varint,2,opt,name=status,proto3,enum=loadtester.StatusType" json:"status,omitempty"`
	Message  string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// Progress specific fields
	TotalRequests     int64  `protobuf:"varint,4,opt,name=total_requests,json=totalRequests,proto3" json:"total_requests,omitempty"`
	CompletedRequests int64  `protobuf:"varint,5,opt,name=completed_requests,json=completedRequests,proto3" json:"completed_requests,omitempty"`
	DurationMs        int64  `protobuf:"varint,6,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	TestId            string `protobuf:"bytes,7,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"` // ID of the test being run, if any
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *WorkerStatus) Reset() {
	*x = WorkerStatus{}
	mi := &file_loadtester_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStatus) ProtoMessage() {}

func (x *WorkerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_loadtester_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerStatus.ProtoReflect.Descriptor instead.
func (*WorkerStatus) Descriptor() ([]byte, []int) {
	return file_loadtester_proto_rawDescGZIP(), []int{2}
}

func (x *WorkerStatus) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *WorkerStatus) GetStatus() StatusType {
	if x != nil {
		return x.Status
	}
	return StatusType_READY
}

func (x *WorkerStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *WorkerStatus) GetTotalRequests() int64 {
	if x != nil {
		return x.TotalRequests
	}
	return 0
}

func (x *WorkerStatus) GetCompletedRequests() int64 {
	if x != nil {
		return x.CompletedRequests
	}
	return 0
}

func (x *WorkerStatus) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *WorkerStatus) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

// Acknowledgment/Response from Master to Worker for status updates
type WorkerStatusAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accepted      bool                   `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerStatusAck) Reset() {
	*x = WorkerStatusAck{}
	mi := &file_loadtester_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerStatusAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStatusAck) ProtoMessage() {}

func (x *WorkerStatusAck) ProtoReflect() protoreflect.Message {
	mi := &file_loadtester_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerStatusAck.ProtoReflect.Descriptor instead.
func (*WorkerStatusAck) Descriptor() ([]byte, []int) {
	return file_loadtester_proto_rawDescGZIP(), []int{3}
}

func (x *WorkerStatusAck) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *WorkerStatusAck) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Test Assignment from Master to Worker
type TestAssignment struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TestId            string                 `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	VegetaPayloadJson string                 `protobuf:"bytes,2,opt,name=vegeta_payload_json,json=vegetaPayloadJson,proto3" json:"vegeta_payload_json,omitempty"` // JSON representation of Vegeta attack options
	DurationSeconds   string                 `protobuf:"bytes,3,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"`         // Vegeta duration (e.g., "10s")
	RatePerSecond     uint64                 `protobuf:"varint,4,opt,name=rate_per_second,json=ratePerSecond,proto3" json:"rate_per_second,omitempty"`            // Vegeta rate (e.g., 50 for 50 req/s)
	TargetsBase64     string                 `protobuf:"bytes,5,opt,name=targets_base64,json=targetsBase64,proto3" json:"targets_base64,omitempty"`               // Base64 encoded Vegeta targets content
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TestAssignment) Reset() {
	*x = TestAssignment{}
	mi := &file_loadtester_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAssignment) ProtoMessage() {}

func (x *TestAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_loadtester_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAssignment.ProtoReflect.Descriptor instead.
func (*TestAssignment) Descriptor() ([]byte, []int) {
	return file_loadtester_proto_rawDescGZIP(), []int{4}
}

func (x *TestAssignment) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestAssignment) GetVegetaPayloadJson() string {
	if x != nil {
		return x.VegetaPayloadJson
	}
	return ""
}

func (x *TestAssignment) GetDurationSeconds() string {
	if x != nil {
		return x.DurationSeconds
	}
	return ""
}

func (x *TestAssignment) GetRatePerSecond() uint64 {
	if x != nil {
		return x.RatePerSecond
	}
	return 0
}

func (x *TestAssignment) GetTargetsBase64() string {
	if x != nil {
		return x.TargetsBase64
	}
	return ""
}

// Test Assignment Response from Worker to Master
type AssignmentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accepted      bool                   `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignmentResponse) Reset() {
	*x = AssignmentResponse{}
	mi := &file_loadtester_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignmentResponse) ProtoMessage() {}

func (x *AssignmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_loadtester_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignmentResponse.ProtoReflect.Descriptor instead.
func (*AssignmentResponse) Descriptor() ([]byte, []int) {
	return file_loadtester_proto_rawDescGZIP(), []int{5}
}

func (x *AssignmentResponse) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *AssignmentResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Test Submission Request from external API/UI to Master
type TestRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Name              string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	VegetaPayloadJson string                 `protobuf:"bytes,2,opt,name=vegeta_payload_json,json=vegetaPayloadJson,proto3" json:"vegeta_payload_json,omitempty"` // Vegeta attack options
	DurationSeconds   string                 `protobuf:"bytes,3,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"`
	RatePerSecond     uint64                 `protobuf:"varint,4,opt,name=rate_per_second,json=ratePerSecond,proto3" json:"rate_per_second,omitempty"`
	TargetsBase64     string                 `protobuf:"bytes,5,opt,name=targets_base64,json=targetsBase64,proto3" json:"targets_base64,omitempty"` // Base64 encoded Vegeta targets content
	RequesterId       string                 `protobuf:"bytes,6,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`       // For authentication/tracking
	WorkerCount       uint32                 `protobuf:"varint,7,opt,name=worker_count,json=workerCount,proto3" json:"worker_count,omitempty"`      // Number of workers to use for this test (default: 1)
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TestRequest) Reset() {
	*x = TestRequest{}
	mi := &file_loadtester_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRequest) ProtoMessage() {}

func (x *TestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loadtester_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRequest.ProtoReflect.Descriptor instead.
func (*TestRequest) Descriptor() ([]byte, []int) {
	return file_loadtester_proto_rawDescGZIP(), []int{6}
}

func (x *TestRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestRequest) GetVegetaPayloadJson() string {
	if x != nil {
		return x.VegetaPayloadJson
	}
	return ""
}

func (x *TestRequest) GetDurationSeconds() string {
	if x != nil {
		return x.DurationSeconds
	}
	return ""
}

func (x *TestRequest) GetRatePerSecond() uint64 {
	if x != nil {
		return x.RatePerSecond
	}
	return 0
}

func (x *TestRequest) GetTargetsBase64() string {
	if x != nil {
		return x.TargetsBase64
	}
	return ""
}

func (x *TestRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *TestRequest) GetWorkerCount() uint32 {
	if x != nil {
		return x.WorkerCount
	}
	return 0
}

// Test Submission Response
type TestSubmissionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TestId        string                 `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestSubmissionResponse) Reset() {
	*x = TestSubmissionResponse{}
	mi := &file_loadtester_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSubmissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSubmissionResponse) ProtoMessage() {}

func (x *TestSubmissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_loadtester_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSubmissionResponse.ProtoReflect.Descriptor instead.
func (*TestSubmissionResponse) Descriptor() ([]byte, []int) {
	return file_loadtester_proto_rawDescGZIP(), []int{7}
}

func (x *TestSubmissionResponse) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestSubmissionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TestSubmissionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Dashboard Request (empty for now)
type DashboardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DashboardRequest) Reset() {
	*x = DashboardRequest{}
	mi := &file_loadtester_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardRequest) ProtoMessage() {}

func (x *DashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loadtester_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardRequest.ProtoReflect.Descriptor instead.
func (*DashboardRequest) Descriptor() ([]byte, []int) {
	return file_loadtester_proto_rawDescGZIP(), []int{8}
}

// Dashboard Status for UI
type DashboardStatus struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TotalWorkers     uint32                 `protobuf:"varint,1,opt,name=total_workers,json=totalWorkers,proto3" json:"total_workers,omitempty"`
	AvailableWorkers uint32                 `protobuf:"varint,2,opt,name=available_workers,json=availableWorkers,proto3" json:"available_workers,omitempty"`
	BusyWorkers      uint32                 `protobuf:"varint,3,opt,name=busy_workers,json=busyWorkers,proto3" json:"busy_workers,omitempty"`
	ActiveTests      []*ActiveTest          `protobuf:"bytes,4,rep,name=active_tests,json=activeTests,proto3" json:"active_tests,omitempty"`
	WorkerSummaries  []*WorkerSummary       `protobuf:"bytes,5,rep,name=worker_summaries,json=workerSummaries,proto3" json:"worker_summaries,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DashboardStatus) Reset() {
	*x = DashboardStatus{}
	mi := &file_loadtester_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DashboardStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardStatus) ProtoMessage() {}

func (x *DashboardStatus) ProtoReflect() protoreflect.Message {
	mi := &file_loadtester_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardStatus.ProtoReflect.Descriptor instead.
func (*DashboardStatus) Descriptor() ([]byte, []int) {
	return file_loadtester_proto_rawDescGZIP(), []int{9}
}

func (x *DashboardStatus) GetTotalWorkers() uint32 {
	if x != nil {
		return x.TotalWorkers
	}
	return 0
}

func (x *DashboardStatus) GetAvailableWorkers() uint32 {
	if x != nil {
		return x.AvailableWorkers
	}
	return 0
}

func (x *DashboardStatus) GetBusyWorkers() uint32 {
	if x != nil {
		return x.BusyWorkers
	}
	return 0
}

func (x *DashboardStatus) GetActiveTests() []*ActiveTest {
	if x != nil {
		return x.ActiveTests
	}
	return nil
}

func (x *DashboardStatus) GetWorkerSummaries() []*WorkerSummary {
	if x != nil {
		return x.WorkerSummaries
	}
	return nil
}

type ActiveTest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	TestId                 string                 `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	TestName               string                 `protobuf:"bytes,2,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	AssignedWorkers        uint32                 `protobuf:"varint,3,opt,name=assigned_workers,json=assignedWorkers,proto3" json:"assigned_workers,omitempty"`
	CompletedWorkers       uint32                 `protobuf:"varint,4,opt,name=completed_workers,json=completedWorkers,proto3" json:"completed_workers,omitempty"`
	FailedWorkers          uint32                 `protobuf:"varint,5,opt,name=failed_workers,json=failedWorkers,proto3" json:"failed_workers,omitempty"`
	Status                 string                 `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"` // e.g., "Running", "Completed", "Partially Failed"
	TotalRequestsSent      int64                  `protobuf:"varint,7,opt,name=total_requests_sent,json=totalRequestsSent,proto3" json:"total_requests_sent,omitempty"`
	TotalRequestsCompleted int64                  `protobuf:"varint,8,opt,name=total_requests_completed,json=totalRequestsCompleted,proto3" json:"total_requests_completed,omitempty"`
	TotalDurationMs        int64                  `protobuf:"varint,9,opt,name=total_duration_ms,json=totalDurationMs,proto3" json:"total_duration_ms,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ActiveTest) Reset() {
	*x = ActiveTest{}
	mi := &file_loadtester_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActiveTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveTest) ProtoMessage() {}

func (x *ActiveTest) ProtoReflect() protoreflect.Message {
	mi := &file_loadtester_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveTest.ProtoReflect.Descriptor instead.
func (*ActiveTest) Descriptor() ([]byte, []int) {
	return file_loadtester_proto_rawDescGZIP(), []int{10}
}

func (x *ActiveTest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *ActiveTest) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *ActiveTest) GetAssignedWorkers() uint32 {
	if x != nil {
		return x.AssignedWorkers
	}
	return 0
}

func (x *ActiveTest) GetCompletedWorkers() uint32 {
	if x != nil {
		return x.CompletedWorkers
	}
	return 0
}

func (x *ActiveTest) GetFailedWorkers() uint32 {
	if x != nil {
		return x.FailedWorkers
	}
	return 0
}

func (x *ActiveTest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ActiveTest) GetTotalRequestsSent() int64 {
	if x != nil {
		return x.TotalRequestsSent
	}
	return 0
}

func (x *ActiveTest) GetTotalRequestsCompleted() int64 {
	if x != nil {
		return x.TotalRequestsCompleted
	}
	return 0
}

func (x *ActiveTest) GetTotalDurationMs() int64 {
	if x != nil {
		return x.TotalDurationMs
	}
	return 0
}

type WorkerSummary struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	WorkerId          string                 `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	StatusMessage     string                 `protobuf:"bytes,2,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	StatusType        StatusType             `protobuf:"varint,3,opt,name=status_type,json=statusType,proto3,enum=loadtester.StatusType" json:"status_type,omitempty"`
	CurrentTestId     string                 `protobuf:"bytes,4,opt,name=current_test_id,json=currentTestId,proto3" json:"current_test_id,omitempty"`
	CompletedRequests int64                  `protobuf:"varint,5,opt,name=completed_requests,json=completedRequests,proto3" json:"completed_requests,omitempty"`
	TotalRequests     int64                  `protobuf:"varint,6,opt,name=total_requests,json=totalRequests,proto3" json:"total_requests,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *WorkerSummary) Reset() {
	*x = WorkerSummary{}
	mi := &file_loadtester_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerSummary) ProtoMessage() {}

func (x *WorkerSummary) ProtoReflect() protoreflect.Message {
	mi := &file_loadtester_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerSummary.ProtoReflect.Descriptor instead.
func (*WorkerSummary) Descriptor() ([]byte, []int) {
	return file_loadtester_proto_rawDescGZIP(), []int{11}
}

func (x *WorkerSummary) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *WorkerSummary) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *WorkerSummary) GetStatusType() StatusType {
	if x != nil {
		return x.StatusType
	}
	return StatusType_READY
}

func (x *WorkerSummary) GetCurrentTestId() string {
	if x != nil {
		return x.CurrentTestId
	}
	return ""
}

func (x *WorkerSummary) GetCompletedRequests() int64 {
	if x != nil {
		return x.CompletedRequests
	}
	return 0
}

func (x *WorkerSummary) GetTotalRequests() int64 {
	if x != nil {
		return x.TotalRequests
	}
	return 0
}

var File_loadtester_proto protoreflect.FileDescriptor

var file_loadtester_proto_rawDesc = string([]byte{
	0x0a, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x22, 0x36,
	0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x46, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x85,
	0x02, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6c,
	0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xd3, 0x01, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x76,
	0x65, 0x67, 0x65, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6a, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x65, 0x67, 0x65, 0x74, 0x61,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x72, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x42,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x22, 0x4a, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x91, 0x02, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x65, 0x67, 0x65, 0x74, 0x61, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x76, 0x65, 0x67, 0x65, 0x74, 0x61, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x65, 0x0a, 0x16, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x12, 0x0a, 0x10,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x87, 0x02, 0x0a, 0x0f, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x75,
	0x73, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0xef, 0x02, 0x0a, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x22, 0x8a, 0x02, 0x0a,
	0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2a, 0x3b, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x55, 0x53, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x32, 0xf2, 0x01, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x6c, 0x6f, 0x61,
	0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x1c, 0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x1a, 0x1b, 0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x63, 0x6b, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x48, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x6f,
	0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xab, 0x01, 0x0a, 0x0d,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a,
	0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x6c, 0x6f,
	0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c,
	0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_loadtester_proto_rawDescOnce sync.Once
	file_loadtester_proto_rawDescData []byte
)

func file_loadtester_proto_rawDescGZIP() []byte {
	file_loadtester_proto_rawDescOnce.Do(func() {
		file_loadtester_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_loadtester_proto_rawDesc), len(file_loadtester_proto_rawDesc)))
	})
	return file_loadtester_proto_rawDescData
}

var file_loadtester_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_loadtester_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_loadtester_proto_goTypes = []any{
	(StatusType)(0),                // 0: loadtester.StatusType
	(*WorkerInfo)(nil),             // 1: loadtester.WorkerInfo
	(*RegisterResponse)(nil),       // 2: loadtester.RegisterResponse
	(*WorkerStatus)(nil),           // 3: loadtester.WorkerStatus
	(*WorkerStatusAck)(nil),        // 4: loadtester.WorkerStatusAck
	(*TestAssignment)(nil),         // 5: loadtester.TestAssignment
	(*AssignmentResponse)(nil),     // 6: loadtester.AssignmentResponse
	(*TestRequest)(nil),            // 7: loadtester.TestRequest
	(*TestSubmissionResponse)(nil), // 8: loadtester.TestSubmissionResponse
	(*DashboardRequest)(nil),       // 9: loadtester.DashboardRequest
	(*DashboardStatus)(nil),        // 10: loadtester.DashboardStatus
	(*ActiveTest)(nil),             // 11: loadtester.ActiveTest
	(*WorkerSummary)(nil),          // 12: loadtester.WorkerSummary
}
var file_loadtester_proto_depIdxs = []int32{
	0,  // 0: loadtester.WorkerStatus.status:type_name -> loadtester.StatusType
	11, // 1: loadtester.DashboardStatus.active_tests:type_name -> loadtester.ActiveTest
	12, // 2: loadtester.DashboardStatus.worker_summaries:type_name -> loadtester.WorkerSummary
	0,  // 3: loadtester.WorkerSummary.status_type:type_name -> loadtester.StatusType
	1,  // 4: loadtester.WorkerService.RegisterWorker:input_type -> loadtester.WorkerInfo
	3,  // 5: loadtester.WorkerService.StreamWorkerStatus:input_type -> loadtester.WorkerStatus
	5,  // 6: loadtester.WorkerService.AssignTest:input_type -> loadtester.TestAssignment
	7,  // 7: loadtester.MasterService.SubmitTest:input_type -> loadtester.TestRequest
	9,  // 8: loadtester.MasterService.GetDashboardStatus:input_type -> loadtester.DashboardRequest
	2,  // 9: loadtester.WorkerService.RegisterWorker:output_type -> loadtester.RegisterResponse
	4,  // 10: loadtester.WorkerService.StreamWorkerStatus:output_type -> loadtester.WorkerStatusAck
	6,  // 11: loadtester.WorkerService.AssignTest:output_type -> loadtester.AssignmentResponse
	8,  // 12: loadtester.MasterService.SubmitTest:output_type -> loadtester.TestSubmissionResponse
	10, // 13: loadtester.MasterService.GetDashboardStatus:output_type -> loadtester.DashboardStatus
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_loadtester_proto_init() }
func file_loadtester_proto_init() {
	if File_loadtester_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_loadtester_proto_rawDesc), len(file_loadtester_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_loadtester_proto_goTypes,
		DependencyIndexes: file_loadtester_proto_depIdxs,
		EnumInfos:         file_loadtester_proto_enumTypes,
		MessageInfos:      file_loadtester_proto_msgTypes,
	}.Build()
	File_loadtester_proto = out.File
	file_loadtester_proto_goTypes = nil
	file_loadtester_proto_depIdxs = nil
}
